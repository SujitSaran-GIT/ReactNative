Components
---------------
Components are independent * reuseable bits of code. They serve the same purpose as JS functions but work in isolation and return HTML

JSX
------------
JSX allows us to write HTML in React Native. JSX makes it easier to write & add HTML in React

Expression In JSX
---------------------
With JSX you can write expression inside curly braces. The expressions can be a variable, or property, or any other valid Javascript expression. JSX will execute the expression and return the result

FlatList
------------
FlatList will iterate all over the data and render the list of the data

Props
-----------------
Props / Properties are arguments passed into Components
Props are passed to components via HTML attributes

Conditional Rendering 
-------------------------
Conditional Rendering in React Native works the same way as conditional works in JavaScript. You can use JavaScrpt operators like if & or Ternary to represent the current state and let React Native update the UI to match them

state
----------
State is abuilt in React obejct that is used to contain data or information about the component. A component's state can change over time, whenever it changes, the component re-renders

Hooks
---------------
Hooks are a new addition in react 16.8. They let you use state and other React features without writing a class.

useState() Hooks
----------------
sueState() hook allows us to track state in a functional component. State generally refers to data or properties that need to be tracking in an application

useEffect() Hooks
--------------------
useEffect() hook allows you to perform side effects in your components. Some examples of side effects are : Fetching data, directly updating the dom

useReducer() Hooks
---------------------
useReducer is a hook that is similar to useState, but it is designed for more complex state objects or state transitions that involves multiple sub-values. It allows you to manage state in a functional, Immutable way.

What is Prop Drilling?
-------------------------
Prop Drilling is the process of passing data (props) from a parent component to a deeply nested child component through multiple intermediary components, even if they donâ€™t need that data themselves. This can make the code harder to maintain and debug.

Real-Life Example: A Family Messenger
Imagine a grandfather wants to send a message to his grandson through a chain of family members.

Scenario:
--------------
Grandfather â†’ Father â†’ Son (Grandson)
The Grandfather has a message: "Hereâ€™s $10 for you!"
He tells the Father, who doesnâ€™t need the money but must pass it along.
The Father tells the Son (Grandson) who finally receives the message.

React Example: Prop Drilling
-----------------------------
const Grandfather = () => {
  const message = "Hereâ€™s $10 for you!"; 
  return <Father message={message} />;
};

const Father = ({ message }) => {
  return <Son message={message} />;
};

const Son = ({ message }) => {
  return <p>Grandfather says: {message}</p>;
};

export default Grandfather;

ðŸ”¹ Problem: The Father component doesnâ€™t need the message, but it still has to pass it down. If the component tree grows, this becomes messy.

Solution: Context API (Avoiding Prop Drilling)
-------------------------------------------------
Instead of passing props manually, we use React Context API to make the data available globally.

import { createContext, useContext } from "react";

const MessageContext = createContext();

const Grandfather = () => {
  return (
    <MessageContext.Provider value="Hereâ€™s $10 for you!">
      <Father />
    </MessageContext.Provider>
  );
};

const Father = () => <Son />;

const Son = () => {
  const message = useContext(MessageContext);
  return <p>Grandfather says: {message}</p>;
};

export default Grandfather;

useContext() Hooks
-----------------------
React context is a way to manage state globally. It can be used together with the useState hook to share state between deeply nested components more easily then with useState alone

Expo Router
----------------
Expo Router is a tool designed to simplify navigation in React Native apps built with expo.

Naviagtion 
----------------
navigation is how users move from one part of an app or website to another. It helps users find what they need by providing links, buttons, or menus.

Dynamic Routes
-----------------
Dynamic routes are a feature that allows you to create routes with variable segments. This is useful for handling different paths based on dynamic data, such as user IDs, product IDs, or other parameters

Zustand
---------------
Zustand is a small, fast, and flexible state management library for React applications. It was created to simplify the management of state in React apps, offering a more straight forward alternative to more complex solutions like Redux